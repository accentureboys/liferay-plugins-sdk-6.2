/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sample.model.Degree;
import com.liferay.sample.model.DegreeModel;
import com.liferay.sample.model.DegreeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Degree service. Represents a row in the &quot;Sample_Degree&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.DegreeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DegreeImpl}.
 * </p>
 *
 * @author jasonxiang
 * @see DegreeImpl
 * @see com.liferay.sample.model.Degree
 * @see com.liferay.sample.model.DegreeModel
 * @generated
 */
@JSON(strict = true)
public class DegreeModelImpl extends BaseModelImpl<Degree>
	implements DegreeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a degree model instance should use the {@link com.liferay.sample.model.Degree} interface instead.
	 */
	public static final String TABLE_NAME = "Sample_Degree";
	public static final Object[][] TABLE_COLUMNS = {
			{ "degreeId", Types.BIGINT },
			{ "degreeName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Sample_Degree (degreeId LONG not null primary key,degreeName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Sample_Degree";
	public static final String ORDER_BY_JPQL = " ORDER BY degree.degreeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Sample_Degree.degreeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.Degree"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.Degree"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Degree toModel(DegreeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Degree model = new DegreeImpl();

		model.setDegreeId(soapModel.getDegreeId());
		model.setDegreeName(soapModel.getDegreeName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Degree> toModels(DegreeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Degree> models = new ArrayList<Degree>(soapModels.length);

		for (DegreeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.Degree"));

	public DegreeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _degreeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDegreeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _degreeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Degree.class;
	}

	@Override
	public String getModelClassName() {
		return Degree.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("degreeId", getDegreeId());
		attributes.put("degreeName", getDegreeName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long degreeId = (Long)attributes.get("degreeId");

		if (degreeId != null) {
			setDegreeId(degreeId);
		}

		String degreeName = (String)attributes.get("degreeName");

		if (degreeName != null) {
			setDegreeName(degreeName);
		}
	}

	@JSON
	@Override
	public long getDegreeId() {
		return _degreeId;
	}

	@Override
	public void setDegreeId(long degreeId) {
		_degreeId = degreeId;
	}

	@JSON
	@Override
	public String getDegreeName() {
		if (_degreeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _degreeName;
		}
	}

	@Override
	public void setDegreeName(String degreeName) {
		_degreeName = degreeName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Degree.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Degree toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Degree)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DegreeImpl degreeImpl = new DegreeImpl();

		degreeImpl.setDegreeId(getDegreeId());
		degreeImpl.setDegreeName(getDegreeName());

		degreeImpl.resetOriginalValues();

		return degreeImpl;
	}

	@Override
	public int compareTo(Degree degree) {
		long primaryKey = degree.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Degree)) {
			return false;
		}

		Degree degree = (Degree)obj;

		long primaryKey = degree.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Degree> toCacheModel() {
		DegreeCacheModel degreeCacheModel = new DegreeCacheModel();

		degreeCacheModel.degreeId = getDegreeId();

		degreeCacheModel.degreeName = getDegreeName();

		String degreeName = degreeCacheModel.degreeName;

		if ((degreeName != null) && (degreeName.length() == 0)) {
			degreeCacheModel.degreeName = null;
		}

		return degreeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{degreeId=");
		sb.append(getDegreeId());
		sb.append(", degreeName=");
		sb.append(getDegreeName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.Degree");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>degreeId</column-name><column-value><![CDATA[");
		sb.append(getDegreeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>degreeName</column-name><column-value><![CDATA[");
		sb.append(getDegreeName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Degree.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Degree.class };
	private long _degreeId;
	private String _degreeName;
	private Degree _escapedModel;
}