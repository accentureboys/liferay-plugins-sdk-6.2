/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sample.model.Thesis;
import com.liferay.sample.model.ThesisModel;
import com.liferay.sample.model.ThesisSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Thesis service. Represents a row in the &quot;Sample_Thesis&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.ThesisModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ThesisImpl}.
 * </p>
 *
 * @author jasonxiang
 * @see ThesisImpl
 * @see com.liferay.sample.model.Thesis
 * @see com.liferay.sample.model.ThesisModel
 * @generated
 */
@JSON(strict = true)
public class ThesisModelImpl extends BaseModelImpl<Thesis>
	implements ThesisModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a thesis model instance should use the {@link com.liferay.sample.model.Thesis} interface instead.
	 */
	public static final String TABLE_NAME = "Sample_Thesis";
	public static final Object[][] TABLE_COLUMNS = {
			{ "thesisId", Types.BIGINT },
			{ "thesisName", Types.VARCHAR },
			{ "userId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Sample_Thesis (thesisId LONG not null primary key,thesisName VARCHAR(75) null,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Sample_Thesis";
	public static final String ORDER_BY_JPQL = " ORDER BY thesis.thesisId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Sample_Thesis.thesisId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.Thesis"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.Thesis"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Thesis toModel(ThesisSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Thesis model = new ThesisImpl();

		model.setThesisId(soapModel.getThesisId());
		model.setThesisName(soapModel.getThesisName());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Thesis> toModels(ThesisSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Thesis> models = new ArrayList<Thesis>(soapModels.length);

		for (ThesisSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.Thesis"));

	public ThesisModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _thesisId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setThesisId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _thesisId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Thesis.class;
	}

	@Override
	public String getModelClassName() {
		return Thesis.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("thesisId", getThesisId());
		attributes.put("thesisName", getThesisName());
		attributes.put("userId", getUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long thesisId = (Long)attributes.get("thesisId");

		if (thesisId != null) {
			setThesisId(thesisId);
		}

		String thesisName = (String)attributes.get("thesisName");

		if (thesisName != null) {
			setThesisName(thesisName);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@JSON
	@Override
	public long getThesisId() {
		return _thesisId;
	}

	@Override
	public void setThesisId(long thesisId) {
		_thesisId = thesisId;
	}

	@JSON
	@Override
	public String getThesisName() {
		if (_thesisName == null) {
			return StringPool.BLANK;
		}
		else {
			return _thesisName;
		}
	}

	@Override
	public void setThesisName(String thesisName) {
		_thesisName = thesisName;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Thesis.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Thesis toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Thesis)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ThesisImpl thesisImpl = new ThesisImpl();

		thesisImpl.setThesisId(getThesisId());
		thesisImpl.setThesisName(getThesisName());
		thesisImpl.setUserId(getUserId());

		thesisImpl.resetOriginalValues();

		return thesisImpl;
	}

	@Override
	public int compareTo(Thesis thesis) {
		long primaryKey = thesis.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Thesis)) {
			return false;
		}

		Thesis thesis = (Thesis)obj;

		long primaryKey = thesis.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Thesis> toCacheModel() {
		ThesisCacheModel thesisCacheModel = new ThesisCacheModel();

		thesisCacheModel.thesisId = getThesisId();

		thesisCacheModel.thesisName = getThesisName();

		String thesisName = thesisCacheModel.thesisName;

		if ((thesisName != null) && (thesisName.length() == 0)) {
			thesisCacheModel.thesisName = null;
		}

		thesisCacheModel.userId = getUserId();

		return thesisCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{thesisId=");
		sb.append(getThesisId());
		sb.append(", thesisName=");
		sb.append(getThesisName());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.Thesis");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>thesisId</column-name><column-value><![CDATA[");
		sb.append(getThesisId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>thesisName</column-name><column-value><![CDATA[");
		sb.append(getThesisName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Thesis.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Thesis.class };
	private long _thesisId;
	private String _thesisName;
	private long _userId;
	private String _userUuid;
	private Thesis _escapedModel;
}