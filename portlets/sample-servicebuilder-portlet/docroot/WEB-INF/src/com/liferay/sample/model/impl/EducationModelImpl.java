/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sample.model.Education;
import com.liferay.sample.model.EducationModel;
import com.liferay.sample.model.EducationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Education service. Represents a row in the &quot;Sample_Education&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.EducationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EducationImpl}.
 * </p>
 *
 * @author jasonxiang
 * @see EducationImpl
 * @see com.liferay.sample.model.Education
 * @see com.liferay.sample.model.EducationModel
 * @generated
 */
@JSON(strict = true)
public class EducationModelImpl extends BaseModelImpl<Education>
	implements EducationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a education model instance should use the {@link com.liferay.sample.model.Education} interface instead.
	 */
	public static final String TABLE_NAME = "Sample_Education";
	public static final Object[][] TABLE_COLUMNS = {
			{ "educationId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "schoolName", Types.VARCHAR },
			{ "degreeId", Types.BIGINT },
			{ "graduateYear", Types.VARCHAR },
			{ "recommender", Types.VARCHAR },
			{ "introduction", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Sample_Education (educationId LONG not null primary key,userId LONG,schoolName VARCHAR(75) null,degreeId LONG,graduateYear VARCHAR(75) null,recommender VARCHAR(75) null,introduction VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Sample_Education";
	public static final String ORDER_BY_JPQL = " ORDER BY education.educationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Sample_Education.educationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.Education"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.Education"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.sample.model.Education"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long EDUCATIONID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Education toModel(EducationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Education model = new EducationImpl();

		model.setEducationId(soapModel.getEducationId());
		model.setUserId(soapModel.getUserId());
		model.setSchoolName(soapModel.getSchoolName());
		model.setDegreeId(soapModel.getDegreeId());
		model.setGraduateYear(soapModel.getGraduateYear());
		model.setRecommender(soapModel.getRecommender());
		model.setIntroduction(soapModel.getIntroduction());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Education> toModels(EducationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Education> models = new ArrayList<Education>(soapModels.length);

		for (EducationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.Education"));

	public EducationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _educationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEducationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _educationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Education.class;
	}

	@Override
	public String getModelClassName() {
		return Education.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("educationId", getEducationId());
		attributes.put("userId", getUserId());
		attributes.put("schoolName", getSchoolName());
		attributes.put("degreeId", getDegreeId());
		attributes.put("graduateYear", getGraduateYear());
		attributes.put("recommender", getRecommender());
		attributes.put("introduction", getIntroduction());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long educationId = (Long)attributes.get("educationId");

		if (educationId != null) {
			setEducationId(educationId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String schoolName = (String)attributes.get("schoolName");

		if (schoolName != null) {
			setSchoolName(schoolName);
		}

		Long degreeId = (Long)attributes.get("degreeId");

		if (degreeId != null) {
			setDegreeId(degreeId);
		}

		String graduateYear = (String)attributes.get("graduateYear");

		if (graduateYear != null) {
			setGraduateYear(graduateYear);
		}

		String recommender = (String)attributes.get("recommender");

		if (recommender != null) {
			setRecommender(recommender);
		}

		String introduction = (String)attributes.get("introduction");

		if (introduction != null) {
			setIntroduction(introduction);
		}
	}

	@JSON
	@Override
	public long getEducationId() {
		return _educationId;
	}

	@Override
	public void setEducationId(long educationId) {
		_educationId = educationId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getSchoolName() {
		if (_schoolName == null) {
			return StringPool.BLANK;
		}
		else {
			return _schoolName;
		}
	}

	@Override
	public void setSchoolName(String schoolName) {
		_schoolName = schoolName;
	}

	@JSON
	@Override
	public long getDegreeId() {
		return _degreeId;
	}

	@Override
	public void setDegreeId(long degreeId) {
		_degreeId = degreeId;
	}

	@JSON
	@Override
	public String getGraduateYear() {
		if (_graduateYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _graduateYear;
		}
	}

	@Override
	public void setGraduateYear(String graduateYear) {
		_graduateYear = graduateYear;
	}

	@JSON
	@Override
	public String getRecommender() {
		if (_recommender == null) {
			return StringPool.BLANK;
		}
		else {
			return _recommender;
		}
	}

	@Override
	public void setRecommender(String recommender) {
		_recommender = recommender;
	}

	@JSON
	@Override
	public String getIntroduction() {
		if (_introduction == null) {
			return StringPool.BLANK;
		}
		else {
			return _introduction;
		}
	}

	@Override
	public void setIntroduction(String introduction) {
		_introduction = introduction;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Education.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Education toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Education)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EducationImpl educationImpl = new EducationImpl();

		educationImpl.setEducationId(getEducationId());
		educationImpl.setUserId(getUserId());
		educationImpl.setSchoolName(getSchoolName());
		educationImpl.setDegreeId(getDegreeId());
		educationImpl.setGraduateYear(getGraduateYear());
		educationImpl.setRecommender(getRecommender());
		educationImpl.setIntroduction(getIntroduction());

		educationImpl.resetOriginalValues();

		return educationImpl;
	}

	@Override
	public int compareTo(Education education) {
		long primaryKey = education.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Education)) {
			return false;
		}

		Education education = (Education)obj;

		long primaryKey = education.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EducationModelImpl educationModelImpl = this;

		educationModelImpl._originalUserId = educationModelImpl._userId;

		educationModelImpl._setOriginalUserId = false;

		educationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Education> toCacheModel() {
		EducationCacheModel educationCacheModel = new EducationCacheModel();

		educationCacheModel.educationId = getEducationId();

		educationCacheModel.userId = getUserId();

		educationCacheModel.schoolName = getSchoolName();

		String schoolName = educationCacheModel.schoolName;

		if ((schoolName != null) && (schoolName.length() == 0)) {
			educationCacheModel.schoolName = null;
		}

		educationCacheModel.degreeId = getDegreeId();

		educationCacheModel.graduateYear = getGraduateYear();

		String graduateYear = educationCacheModel.graduateYear;

		if ((graduateYear != null) && (graduateYear.length() == 0)) {
			educationCacheModel.graduateYear = null;
		}

		educationCacheModel.recommender = getRecommender();

		String recommender = educationCacheModel.recommender;

		if ((recommender != null) && (recommender.length() == 0)) {
			educationCacheModel.recommender = null;
		}

		educationCacheModel.introduction = getIntroduction();

		String introduction = educationCacheModel.introduction;

		if ((introduction != null) && (introduction.length() == 0)) {
			educationCacheModel.introduction = null;
		}

		return educationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{educationId=");
		sb.append(getEducationId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", schoolName=");
		sb.append(getSchoolName());
		sb.append(", degreeId=");
		sb.append(getDegreeId());
		sb.append(", graduateYear=");
		sb.append(getGraduateYear());
		sb.append(", recommender=");
		sb.append(getRecommender());
		sb.append(", introduction=");
		sb.append(getIntroduction());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.Education");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>educationId</column-name><column-value><![CDATA[");
		sb.append(getEducationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schoolName</column-name><column-value><![CDATA[");
		sb.append(getSchoolName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>degreeId</column-name><column-value><![CDATA[");
		sb.append(getDegreeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>graduateYear</column-name><column-value><![CDATA[");
		sb.append(getGraduateYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recommender</column-name><column-value><![CDATA[");
		sb.append(getRecommender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>introduction</column-name><column-value><![CDATA[");
		sb.append(getIntroduction());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Education.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Education.class
		};
	private long _educationId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _schoolName;
	private long _degreeId;
	private String _graduateYear;
	private String _recommender;
	private String _introduction;
	private long _columnBitmask;
	private Education _escapedModel;
}