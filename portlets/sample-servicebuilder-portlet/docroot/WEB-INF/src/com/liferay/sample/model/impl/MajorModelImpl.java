/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sample.model.Major;
import com.liferay.sample.model.MajorModel;
import com.liferay.sample.model.MajorSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Major service. Represents a row in the &quot;Sample_Major&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.MajorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MajorImpl}.
 * </p>
 *
 * @author jasonxiang
 * @see MajorImpl
 * @see com.liferay.sample.model.Major
 * @see com.liferay.sample.model.MajorModel
 * @generated
 */
@JSON(strict = true)
public class MajorModelImpl extends BaseModelImpl<Major> implements MajorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a major model instance should use the {@link com.liferay.sample.model.Major} interface instead.
	 */
	public static final String TABLE_NAME = "Sample_Major";
	public static final Object[][] TABLE_COLUMNS = {
			{ "majorId", Types.BIGINT },
			{ "majorName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Sample_Major (majorId LONG not null primary key,majorName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Sample_Major";
	public static final String ORDER_BY_JPQL = " ORDER BY major.majorId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Sample_Major.majorId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.Major"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.Major"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Major toModel(MajorSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Major model = new MajorImpl();

		model.setMajorId(soapModel.getMajorId());
		model.setMajorName(soapModel.getMajorName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Major> toModels(MajorSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Major> models = new ArrayList<Major>(soapModels.length);

		for (MajorSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.Major"));

	public MajorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _majorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMajorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _majorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Major.class;
	}

	@Override
	public String getModelClassName() {
		return Major.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("majorId", getMajorId());
		attributes.put("majorName", getMajorName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long majorId = (Long)attributes.get("majorId");

		if (majorId != null) {
			setMajorId(majorId);
		}

		String majorName = (String)attributes.get("majorName");

		if (majorName != null) {
			setMajorName(majorName);
		}
	}

	@JSON
	@Override
	public long getMajorId() {
		return _majorId;
	}

	@Override
	public void setMajorId(long majorId) {
		_majorId = majorId;
	}

	@JSON
	@Override
	public String getMajorName() {
		if (_majorName == null) {
			return StringPool.BLANK;
		}
		else {
			return _majorName;
		}
	}

	@Override
	public void setMajorName(String majorName) {
		_majorName = majorName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Major.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Major toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Major)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MajorImpl majorImpl = new MajorImpl();

		majorImpl.setMajorId(getMajorId());
		majorImpl.setMajorName(getMajorName());

		majorImpl.resetOriginalValues();

		return majorImpl;
	}

	@Override
	public int compareTo(Major major) {
		long primaryKey = major.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Major)) {
			return false;
		}

		Major major = (Major)obj;

		long primaryKey = major.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Major> toCacheModel() {
		MajorCacheModel majorCacheModel = new MajorCacheModel();

		majorCacheModel.majorId = getMajorId();

		majorCacheModel.majorName = getMajorName();

		String majorName = majorCacheModel.majorName;

		if ((majorName != null) && (majorName.length() == 0)) {
			majorCacheModel.majorName = null;
		}

		return majorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{majorId=");
		sb.append(getMajorId());
		sb.append(", majorName=");
		sb.append(getMajorName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.Major");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>majorId</column-name><column-value><![CDATA[");
		sb.append(getMajorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>majorName</column-name><column-value><![CDATA[");
		sb.append(getMajorName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Major.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Major.class };
	private long _majorId;
	private String _majorName;
	private Major _escapedModel;
}