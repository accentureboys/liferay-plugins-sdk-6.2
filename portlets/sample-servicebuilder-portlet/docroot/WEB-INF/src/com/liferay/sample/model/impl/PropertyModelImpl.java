/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sample.model.Property;
import com.liferay.sample.model.PropertyModel;
import com.liferay.sample.model.PropertySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Property service. Represents a row in the &quot;Sample_Property&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.PropertyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PropertyImpl}.
 * </p>
 *
 * @author jasonxiang
 * @see PropertyImpl
 * @see com.liferay.sample.model.Property
 * @see com.liferay.sample.model.PropertyModel
 * @generated
 */
@JSON(strict = true)
public class PropertyModelImpl extends BaseModelImpl<Property>
	implements PropertyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a property model instance should use the {@link com.liferay.sample.model.Property} interface instead.
	 */
	public static final String TABLE_NAME = "Sample_Property";
	public static final Object[][] TABLE_COLUMNS = {
			{ "propertyId", Types.BIGINT },
			{ "propertyName", Types.VARCHAR },
			{ "userId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Sample_Property (propertyId LONG not null primary key,propertyName VARCHAR(75) null,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Sample_Property";
	public static final String ORDER_BY_JPQL = " ORDER BY property.propertyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Sample_Property.propertyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.Property"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.Property"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Property toModel(PropertySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Property model = new PropertyImpl();

		model.setPropertyId(soapModel.getPropertyId());
		model.setPropertyName(soapModel.getPropertyName());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Property> toModels(PropertySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Property> models = new ArrayList<Property>(soapModels.length);

		for (PropertySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.Property"));

	public PropertyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _propertyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPropertyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _propertyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Property.class;
	}

	@Override
	public String getModelClassName() {
		return Property.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("propertyId", getPropertyId());
		attributes.put("propertyName", getPropertyName());
		attributes.put("userId", getUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long propertyId = (Long)attributes.get("propertyId");

		if (propertyId != null) {
			setPropertyId(propertyId);
		}

		String propertyName = (String)attributes.get("propertyName");

		if (propertyName != null) {
			setPropertyName(propertyName);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@JSON
	@Override
	public long getPropertyId() {
		return _propertyId;
	}

	@Override
	public void setPropertyId(long propertyId) {
		_propertyId = propertyId;
	}

	@JSON
	@Override
	public String getPropertyName() {
		if (_propertyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _propertyName;
		}
	}

	@Override
	public void setPropertyName(String propertyName) {
		_propertyName = propertyName;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Property.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Property toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Property)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PropertyImpl propertyImpl = new PropertyImpl();

		propertyImpl.setPropertyId(getPropertyId());
		propertyImpl.setPropertyName(getPropertyName());
		propertyImpl.setUserId(getUserId());

		propertyImpl.resetOriginalValues();

		return propertyImpl;
	}

	@Override
	public int compareTo(Property property) {
		long primaryKey = property.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Property)) {
			return false;
		}

		Property property = (Property)obj;

		long primaryKey = property.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Property> toCacheModel() {
		PropertyCacheModel propertyCacheModel = new PropertyCacheModel();

		propertyCacheModel.propertyId = getPropertyId();

		propertyCacheModel.propertyName = getPropertyName();

		String propertyName = propertyCacheModel.propertyName;

		if ((propertyName != null) && (propertyName.length() == 0)) {
			propertyCacheModel.propertyName = null;
		}

		propertyCacheModel.userId = getUserId();

		return propertyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{propertyId=");
		sb.append(getPropertyId());
		sb.append(", propertyName=");
		sb.append(getPropertyName());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.Property");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>propertyId</column-name><column-value><![CDATA[");
		sb.append(getPropertyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>propertyName</column-name><column-value><![CDATA[");
		sb.append(getPropertyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Property.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Property.class
		};
	private long _propertyId;
	private String _propertyName;
	private long _userId;
	private String _userUuid;
	private Property _escapedModel;
}